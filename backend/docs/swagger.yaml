basePath: /api/v1
definitions:
  gorm.DeletedAt:
    properties:
      time:
        type: string
      valid:
        description: Valid is true if Time is not NULL
        type: boolean
    type: object
  model.KeyResult:
    properties:
      created_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      id:
        type: integer
      objective_id:
        type: integer
      start_date:
        type: string
      title:
        type: string
      updated_at:
        type: string
    type: object
  model.Objective:
    properties:
      created_at:
        type: string
      description:
        type: string
      due_date:
        type: string
      id:
        type: integer
      key_results:
        items:
          $ref: '#/definitions/model.KeyResult'
        type: array
      start_date:
        type: string
      title:
        type: string
      updated_at:
        type: string
      user_id:
        type: string
    type: object
  model.User:
    properties:
      createdAt:
        type: string
      deletedAt:
        $ref: '#/definitions/gorm.DeletedAt'
      email:
        type: string
      id:
        type: integer
      updatedAt:
        type: string
      user_id:
        type: string
    type: object
info:
  contact: {}
  description: This is a simple API server for Makibi project.
  title: Makibi API
  version: v0.0.1
paths:
  /me:
    get:
      consumes:
      - application/json
      description: get current authorized user
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: get current authorized user
      tags:
      - me
  /users/{user_id}:
    get:
      consumes:
      - application/json
      description: get specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: get specific user
      tags:
      - users
    put:
      consumes:
      - application/json
      description: get specific user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: User
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/model.User'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.User'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: get specific user
      tags:
      - users
  /users/{user_id}/objectives:
    get:
      consumes:
      - application/json
      description: get all objectives of a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/model.Objective'
            type: array
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: get all objectives of a user
      tags:
      - objectives
    post:
      consumes:
      - application/json
      description: create new objective
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Objective
        in: body
        name: objective
        required: true
        schema:
          $ref: '#/definitions/model.Objective'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Objective'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: create new objective
      tags:
      - objectives
  /users/{user_id}/objectives/{objective_id}:
    delete:
      consumes:
      - application/json
      description: delete a objective of a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Objective ID
        in: path
        name: objective_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Objective'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: delete a objective of a user
      tags:
      - objectives
    get:
      consumes:
      - application/json
      description: get a objectives of a user
      parameters:
      - description: User ID
        in: path
        name: user_id
        required: true
        type: string
      - description: Objective ID
        in: path
        name: objective_id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/model.Objective'
        "401":
          description: Unauthorized
          schema:
            type: string
        "500":
          description: internal server error
          schema:
            type: string
      summary: get a objectives of a user
      tags:
      - objectives
swagger: "2.0"
